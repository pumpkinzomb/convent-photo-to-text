{"version":3,"sources":["Tesseract/language.js","App.js","index.js"],"names":["supportList","value","label","App","props","readImage","img","lang","a","async","Tesseract","recognize","text","data","console","log","updateState","update","state","$set","isLoading","setState","handleInputText","e","target","handleChange","image","files","imgUrl","URL","createObjectURL","selectedLanguage","handleChangeSelect","selected","event","handleReadAgain","handleReset","textArea","React","createRef","textCopyBtn","languages","button","this","current","input","clipboard","Clipboard","on","clearSelection","destroy","className","htmlFor","id","type","accept","onChange","classNamePrefix","options","isSearchable","autoFocus","color","src","crossOrigin","alt","ref","placeholder","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.552872ac.chunk.js","sourcesContent":["const supportList = [\r\n  { value: \"eng\", label: \"English\" },\r\n  { value: \"kor\", label: \"Korean\" },\r\n  { value: \"jpn\", label: \"Japanese\" },\r\n  { value: \"chi_sim\", label: \"Chinese - Simplified\" },\r\n  { value: \"fra\", label: \"French\" },\r\n  { value: \"deu\", label: \"German\" },\r\n  { value: \"nor\", label: \"Norwegian\" }\r\n];\r\n\r\nexport default supportList;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport Clipboard from \"clipboard\";\r\nimport Select from \"react-select\";\r\nimport languages from \"./Tesseract/language.js\";\r\nimport update from \"react-addons-update\";\r\nimport ReactLoading from \"react-loading\";\r\n// import loadImage from \"blueimp-load-image\";\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textArea = React.createRef();\r\n    this.textCopyBtn = React.createRef();\r\n\r\n    this.state = {\r\n      text: \"\",\r\n      image: \"\",\r\n      isLoading: false,\r\n      selectedLanguage: languages[0]\r\n    };\r\n  }\r\n  readImage = async (img, lang) => {\r\n    const {\r\n      data: { text }\r\n    } = await Tesseract.recognize(img, lang);\r\n    console.log(\"read success\", text);\r\n    const updateState = update(this.state, {\r\n      text: { $set: text },\r\n      isLoading: { $set: false }\r\n    });\r\n    this.setState(updateState);\r\n  };\r\n  handleInputText = e => {\r\n    const updateState = update(this.state, {\r\n      text: { $set: e.target.value }\r\n    });\r\n    this.setState(updateState);\r\n  };\r\n  handleChange = e => {\r\n    const image = e.target.files[0];\r\n    if (image) {\r\n      const imgUrl = URL.createObjectURL(image);\r\n      const updateState = update(this.state, {\r\n        image: { $set: imgUrl },\r\n        isLoading: { $set: true }\r\n      });\r\n      this.setState(updateState);\r\n      this.readImage(imgUrl, this.state.selectedLanguage.value);\r\n    }\r\n  };\r\n  handleChangeSelect = (selected, event) => {\r\n    if (!this.state.image) {\r\n      const updateState = update(this.state, {\r\n        selectedLanguage: {\r\n          $set: selected\r\n        }\r\n      });\r\n      this.setState(updateState);\r\n    } else {\r\n      const updateState = update(this.state, {\r\n        selectedLanguage: {\r\n          $set: selected\r\n        },\r\n        isLoading: {\r\n          $set: true\r\n        }\r\n      });\r\n      this.setState(updateState);\r\n      this.readImage(this.state.image, selected.value);\r\n    }\r\n  };\r\n  handleReadAgain = () => {\r\n    if (!this.state.image) {\r\n      return;\r\n    }\r\n    const updateState = update(this.state, {\r\n      isLoading: {\r\n        $set: true\r\n      }\r\n    });\r\n    this.setState(updateState);\r\n    const { image, selectedLanguage } = this.state;\r\n    this.readImage(image, selectedLanguage.value);\r\n  };\r\n  handleReset = () => {\r\n    const updateState = update(this.state, {\r\n      text: { $set: \"\" },\r\n      image: { $set: \"\" },\r\n      isLoading: {\r\n        $set: false\r\n      }\r\n    });\r\n    this.setState(updateState);\r\n  };\r\n  componentDidMount() {\r\n    const button = this.textCopyBtn.current;\r\n    const input = this.textArea.current;\r\n    this.clipboard = new Clipboard(button, {\r\n      target: () => input\r\n    });\r\n    this.clipboard.on(\"success\", function(e) {\r\n      // console.info(\"Action:\", e.action);\r\n      // console.info(\"Text:\", e.text);\r\n      // console.info(\"Trigger:\", e.trigger);\r\n      e.clearSelection();\r\n    });\r\n    this.clipboard.on(\"error\", function(e) {\r\n      // console.error('Action:', e.action);\r\n      // console.error('Trigger:', e.trigger);\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    this.clipboard.destroy();\r\n  }\r\n  render() {\r\n    const { text, image, selectedLanguage, isLoading } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>TEXT:URE</h1>\r\n        <p className=\"description\">\r\n          Simple Application <br />\r\n          which extract text in photograph.\r\n        </p>\r\n\r\n        <div className=\"camera-section\">\r\n          <label htmlFor=\"pickPhoto\">\r\n            <i className=\"material-icons\">photo_camera</i>\r\n          </label>\r\n          <input\r\n            id=\"pickPhoto\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"select-section\">\r\n          <label htmlFor=\"select\">Select Language.</label>\r\n          <Select\r\n            id=\"select\"\r\n            classNamePrefix=\"select\"\r\n            options={languages}\r\n            value={selectedLanguage}\r\n            isSearchable={false}\r\n            onChange={this.handleChangeSelect}\r\n            autoFocus={true}\r\n            // menuIsOpen={true}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"text-section\">\r\n          <div className=\"image\">\r\n            {isLoading ? (\r\n              <div className=\"loading\">\r\n                <span>Now Converting...</span>\r\n                <ReactLoading type=\"bars\" color=\"#fd8d8e\" />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {image ? (\r\n              <img src={image} crossOrigin=\"anonymous\" alt={image} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          <div className=\"text\">\r\n            <textarea\r\n              value={text}\r\n              ref={this.textArea}\r\n              onChange={this.handleInputText}\r\n              placeholder=\"Converted text...\"\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btns\">\r\n          <button type=\"button\" ref={this.textCopyBtn} className=\"ko\">\r\n            복사하기\r\n          </button>\r\n          <button type=\"button\" onClick={this.handleReadAgain} className=\"ko\">\r\n            재인식\r\n          </button>\r\n          <button type=\"button\" onClick={this.handleReset}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n        <div className=\"use-way\">\r\n          <h2>Directions for use</h2>\r\n          <span className=\"ko\">\r\n            ( 권장되는 방법 )<br /> <b>앨범 속 보정된 사진을 사용하는 것</b>이\r\n            사진을 바로 찍어서 사용하는 것보다 글자 인식률이 높습니다.\r\n          </span>\r\n          <span className=\"en\">\r\n            ( Recommended )<br /> <b>Using calibrated pictures in an album</b>{\" \"}\r\n            is more recognizable than taking and using them.\r\n          </span>\r\n        </div>\r\n        <p className=\"copyright\">made by pumpkinzomb.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"reset-css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}